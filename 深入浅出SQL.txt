### 深入浅出SQL

## 数据库基础

# 数据库
数据库：保存有组织的数据的容器（通常是一个文件或一组文件）
# 表
表：某种特定类型数据的结构化清单
表都有一个名称来标识自己，表名是唯一的
*
表名说明
使表名成为唯一的，实际上是由数据库名和表名等的组合，有的数据库还是用数据库拥有者的名字作为唯一名的一部分，同一数据库不能拥有相同表名，不同数据库可以
*
表具有一些特性，定义了数据在表中如何存储，包含存储什么样的数据，数据如何分解，各部分信息如何命名等信息。描述表的这组信息就是所谓的模式(schema),模式可以用来描述数据库中特定的表，也可以用来描述整个数据库（和其中表的关系）
模式：关于数据库和表的布局及特性的信息
# 列和数据类型
表由列组成。列存储表中的某部分的信息
列：表中的一个字段，所有表都是由一个或多个列组成的
数据库中每个列都有相应的数据类型，数据类型定义了列可以存储哪些数据种类
数据类型：列所允许的数据的类型，每个表列都有相应的数据类型，限制（或允许）该列中存储的数据
数据类型限定了可存储在列中的数据类型，还帮助正确地分类数据，并在优化磁盘使用方面起到重要作用。
*
数据类型兼容
数据类型及其名称是SQL不兼容的一个主要原因，虽然大多数基本数据类型得到了一致的支持，但是许多高级的数据类型却没有。
需要在建表时注意这种不同数据库之间不同数据类型的差异
*
# 行
表中的数据是按行存储的，所保存的每个记录存储在自己的行内。
行：表中的一条记录
# 主键
表中每一行都应该有一列（或几列）可以唯一标识自己。
主键：一列（或一组列），其值可以唯一标识表中的每一行
唯一标识表中每行的这个列（或这几列）称为主键，主键用来表示一个特定的行，没有主键，删除和更新特定行极为困难。
表中的任何列都可作为主键，需要满足：
1.任何两行都不具有相同的主键值
2.每一行都必须具有一个主键值（主键列不允许NULL值）
3.主键列中的值不允许修改或更新
4.主键值不能重用（如果某行从表中删除，它的主键不能够赋予之后的新行使用）

# 什么是SQL
SQL是结构化查询语言（Structured Query Language）的简写。SQL是一种专门和数据库沟通的语言。
SQL中只有很少的词，有意而为。
优点；
1.SQL不是某个特定数据库供应商专有的语言，几乎所有重要的DBMS都支持SQL
2.SQL简单易学，语句全都是由有很强描述性的单词组成
3.SQL实际上也是一种强有力的语言，可以进行非常复杂和高级的数据库操作
*
SQL扩展
DBMS厂商通过增加语言或指令，第对QL进行扩展，但一般只针对个别DBMS。
*


## 检索数据

# SELECT语句
关键字：作为SQL组成部分的保留字，关键字不能用作表或列的名字
# 检索单个列
SELECT column_name FROM table_name 
*
未排序数据
如果没有明确排序查询结果，则返回的数据没有特定的顺序，可能数据的顺序可能是添加到表中的顺序，也可能不是
结束SQL语句
多条SQL语句之间必须以;（分号）分隔。多数DBMS不需要在单条SQL后添加分号，但也有DBMS需要。
SQL语句的大小写
SQL语句不区分大小写。
使用空格
在处理SQL语句时，所有空格都被忽略，SQL语句可以一行也可以多行。
*
# 检索多个列
SELECT column_name_1, column_name_2,... from table_name;
# 检索所有列
SELECT * FROM table_name;
*
使用通配符
一般而言，除非确实需要表中的每一列，否则最好不要使用*通配符。检索不需要的列通常会降低检索和应用程序的性能
检索未知列
使用通配符的一大特点，由于不明确指定列名，所以能检索出名字未知的列。
*
# 检索不同的值
使用DISTINCT关键字
SELECT DISTINCT column_name FROM table_name;
*
不能部分使用DISTINCT
DISTINCT关键字作用于所有的列，不仅仅是其后的一列
*
# 限制结果
限制返回的行数，不同的DBMS的实现不同
1.SQL Server和Access使用TOP关键字来实现
SELECT TOP num column_name FROM table_name;
2.DB2使用FETCH FIRST 5 ROWS ONLY格式
SELECT column_name FROM table_name FETCH FIRST 5 ROWS ONLY;
3.Oracle使用ROWNUM计算
SELECT column_name FROM table_name WHERE ROWNUM <= num;
4.MySQL、MariaDB和SQLite使用LIMIT子句
SELECT column_name FROM table_name LIMIT num OFFSET start;
# 使用注释
-- xxxx 行内注释
# xxxx 行内注释
/* xxx */ 多行注释
 
## 排序检索数据
# 排序数据
如果不显示排序，数据一般以底层表中出现的顺序显示，有可能是最初添加到表中的顺序。但是数据进行过更新或删除，顺序可能会受到DBMS重用回收存储空间的方式的邮箱
*
子句
SQL语句由子句构成，有些必需，有些可选。一个子句通常由一个短见字加上所提供的数据构成
*
为了显示排序，使用ORDER BY子句。ORDER BY子句取一个或多个列的名字，据此对输出进行排序。
SELECT column_name FROM table_name ORDER BY column_name;
*
ORDER BY应该确保是SELECT语句中的最后一条子句。
通过非选择列进行排序是合法的
*
# 按多个列排序
SELECT column_name FROM table_name ORDER BY column_name_1[,column_name_2...];
多个列排序时，排序的顺序完全按规定进行，换句话说，先按照指定的第一列排序，再往后推
# 按位置排序
除了能够用列名指出排序顺序外，ORDER BY还支持按相对列位置进行排序
SELECT column_name FROM table_name ORDER BY index_1[, index_2..];
指定的是选择列的相对位置，缺点在于不明确指出列名容易使用错误的列名进行排序。
# 指定排序方向
数据排序不限于升序排序，这是默认的排序顺序，还可以使用ORDER BY子句进行降序排序，分别使用ASC和DESC语句
SELECT column_name FROM table_name ORDER BY 1 ASC -- 升序排序
SELECT column_name FROM table_name ORDER BY 1 DESC -- 降序排序
可以进行部分排序
SELECT * FROM table_name ORDER column_name_1 DESC, column_name_2;
DESC关键字只对位于其前面的列名生效。
*
相对多个列进行降序排序，需要对每个列名后都加上DESC关键字
大小写的排序取决于数据库的实现 通常A和a的排序顺序一致
*

## 过滤数据
# 使用WHERE子句
需要指定搜索条件，也称为过滤条件
SQL中根据WHERE子句中指定的搜索条件进行过滤
SELECT * FROM table_name WHERE field = condition;
*
WHERE子句的位置
应该位于ORDER BY子句之前，否则会发生错误
*
# WHERE子句操作符
操作符				说明
=					等于
<>					不等于
!=					不等于
<					小于
<=					小于等于
#!<					不小于
>					大于
>=					大于等于
#!>					不大于
BETWEEN				在指定的两个值之间
IS NULL				为NULL值
IS NOT NULL			不为NULL值
*
操作符兼容
<>和!=相同
!<和>=相同
并非所有DBMS都支持这些操作符，需要在实际操作中查询是否支持
*
1.检查单个值
SELECT * FROM table_name WHERE column_name op condition;
2.不匹配检查
SELECT * FROM table_name WHERE column_name <>/!= condition;
*
''单引号用于字符串
*
3.范围值检查
使用BETWEEN操作符，需要两个值
SELECT * FROM table_name WHERE column_name BETWEEN value_1 AND value_2;
4.控制检查
在创建表时可以指定列是否可为NULL
*
NULL
无值，与字段包含0、空字符串或仅仅包含空格不同
*
不能使用=NULL来检索，而是需要使用IS NULL
SELECT * FROM table_name WHERE column_name IS NULL;

## 高级数据过滤
# 组合WHERE子句
允许给出多个WHERE子句，有两种使用方式，即以AND子句或OR子句的方式使用
*
操作符
用来联结或改变WHERE子句中的子句的关键字，也称为逻辑操作符
*
1.AND操作符
SELECT * FROM table_name WHERE column_name_1 op value_1 AND column_name_2 op value_2;
2.OR操作符
SELECT * FROM table_name WHERE column_name_1 op value_1 OR column_name_2 op value_2;
3.求值顺序
SQL的在处理OR之前，会优先处理AND操作符。换句话说AND的运算优先级更高。
比如
SELECT * FROM table_name WHERE condition_1 OR condition_2 AND condition_3;
结果是
SELECT * FROM table_name WHERE (condition_1) OR (condition_2 AND condition_3);
所以需要添加()来正确的计算
# IN操作符
IN操作符用于指定条件范围，范围中的每个条件都可以进行匹配，IN取一组由逗号分隔、括在圆括号中的合法值。
SELECT * FROM table_name WHERE column_name_1 IN (value_1, value_2 ...);
*
为什么使用IN操作符
1.IN操作符的语法更清楚、更直观
2.在与其他AND和OR操作符组合使用IN时，求值顺序更容易管理
3.IN操作符一般比一组OR操作符执行的更快
4.IN的最大优点是可以包含其他SELECT语句，能够更动态的建立WHERE子句
IN
WHERE子句中用来指定要匹配值的清单关键字，功能与OR相当
*







































